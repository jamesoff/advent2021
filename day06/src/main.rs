fn main() {
    println!("Hello, world!");
    println!("{}", challenge1("2,5,2,3,5,3,5,5,4,2,1,5,5,5,5,1,2,5,1,1,1,1,1,5,5,1,5,4,3,3,1,2,4,2,4,5,4,5,5,5,4,4,1,3,5,1,2,2,4,2,1,1,2,1,1,4,2,1,2,1,2,1,3,3,3,5,1,1,1,3,4,4,1,3,1,5,5,1,5,3,1,5,2,2,2,2,1,1,1,1,3,3,3,1,4,3,5,3,5,5,1,4,4,2,5,1,5,5,4,5,5,1,5,4,4,1,3,4,1,2,3,2,5,1,3,1,5,5,2,2,2,1,3,3,1,1,1,4,2,5,1,2,4,4,2,5,1,1,3,5,4,2,1,2,5,4,1,5,5,2,4,3,5,2,4,1,4,3,5,5,3,1,5,1,3,5,1,1,1,4,2,4,4,1,1,1,1,1,3,4,5,2,3,4,5,1,4,1,2,3,4,2,1,4,4,2,1,5,3,4,1,1,2,2,1,5,5,2,5,1,4,4,2,1,3,1,5,5,1,4,2,2,1,1,1,5,1,3,4,1,3,3,5,3,5,5,3,1,4,4,1,1,1,3,3,2,3,1,1,1,5,4,2,5,3,5,4,4,5,2,3,2,5,2,1,1,1,2,1,5,3,5,1,4,1,2,1,5,3,5,2,1,3,1,2,4,5,3,4,3", 80));
    println!("{}", challenge1("2,5,2,3,5,3,5,5,4,2,1,5,5,5,5,1,2,5,1,1,1,1,1,5,5,1,5,4,3,3,1,2,4,2,4,5,4,5,5,5,4,4,1,3,5,1,2,2,4,2,1,1,2,1,1,4,2,1,2,1,2,1,3,3,3,5,1,1,1,3,4,4,1,3,1,5,5,1,5,3,1,5,2,2,2,2,1,1,1,1,3,3,3,1,4,3,5,3,5,5,1,4,4,2,5,1,5,5,4,5,5,1,5,4,4,1,3,4,1,2,3,2,5,1,3,1,5,5,2,2,2,1,3,3,1,1,1,4,2,5,1,2,4,4,2,5,1,1,3,5,4,2,1,2,5,4,1,5,5,2,4,3,5,2,4,1,4,3,5,5,3,1,5,1,3,5,1,1,1,4,2,4,4,1,1,1,1,1,3,4,5,2,3,4,5,1,4,1,2,3,4,2,1,4,4,2,1,5,3,4,1,1,2,2,1,5,5,2,5,1,4,4,2,1,3,1,5,5,1,4,2,2,1,1,1,5,1,3,4,1,3,3,5,3,5,5,3,1,4,4,1,1,1,3,3,2,3,1,1,1,5,4,2,5,3,5,4,4,5,2,3,2,5,2,1,1,1,2,1,5,3,5,1,4,1,2,1,5,3,5,2,1,3,1,2,4,5,3,4,3", 256));
}

fn challenge1(input: &str, days: i32) -> i64 {
    let initial_fish: Vec<i64> = input
        .split(",")
        .map(|x: &str| x.parse::<i64>().expect("bad int"))
        .collect();
    let mut fish_days = vec![0, 0, 0, 0, 0, 0, 0, 0, 0];
    for fish in initial_fish {
        fish_days[fish as usize] += 1;
    }

    for _day in 1..=days {
        fish_days = process_day(fish_days);
        // println!("at day {}, fish days are {:?}, total fish: {}", day, fish_days, fish_days.iter().sum::<i32>());
    }
    fish_days.iter().sum::<i64>()
}

fn process_day(fish_days: Vec<i64>) -> Vec<i64> {
    let mut tomorrow: Vec<i64>;
    if let Some((today, later)) = fish_days.split_first() {
        tomorrow = later.to_vec();
        tomorrow[6] += today;
        tomorrow.push(*today);
    }
    else {
        panic!("failed to split")
    }
    tomorrow
}

#[cfg(test)]
mod tests {

    use super::*;

    #[test]
    fn test_challenge1() {
        assert_eq!(challenge1("3,4,3,1,2", 18), 26);
        assert_eq!(challenge1("3,4,3,1,2", 80), 5934);
    }

}
